#ifndef _COMPRESS_H_
#define _COMPRESS_H_


// 接口实现

//============================================================================================================
//	RLE - 压缩算法
//============================================================================================================
/********************************************************************/
/*	功  能 ：内部 RLE 编码，返回禁止的压缩方式标识					*/
/*	说  明 ：OutBuffer 必须足够大，大于InBuffer*1.5                 */
/*  返回值 ：出错:FALSE 成功：TRUE;                                 */
/********************************************************************/
BOOL RLE_Encode(IN BYTE *InBuffer, IN DWORD dwInLen, OUT BYTE *OutBuffer, OUT DWORD &dwOutLen);


/********************************************************************/
/*	功  能 ：内部 RLE 解码，返回解码后的 BufferSize					*/
/*	说  明 ：OutBuffer 必须足够大									*/
/*  返回值 ：解压后的数据大小,解压出错返回0；						*/
/********************************************************************/
DWORD RLE_Decode(IN BYTE *InBuffer, IN DWORD dwInLen, OUT BYTE *OutBuffer);




//===========================================================================================================
//	                                          LZ77 - 压缩算法
//===========================================================================================================

/********************************************************************/
/*	功  能 ：内部 LZ77 编码，返回禁止的压缩方式标识					*/
/*	说  明 ：OutBuffer 必须预先置 0									*/
/*  返回值 ：成功：TRUE， 失败：FALSE;							 	*/
/********************************************************************/
BOOL LZ77_Encode(IN BYTE *InBuffer, IN DWORD dwInLen, OUT BYTE *OutBuffer, OUT DWORD &dwOutLen);

/********************************************************************/
/*	功  能 ：内部 LZ77 解码，返回解码后的 BufferSize				*/
/*	说  明 ：OutBuffer 必须足够大									*/
/*  返回值 ：成功：解压后的数据大小，失败：0						*/
/********************************************************************/

DWORD LZ77_Decode(IN BYTE *InBuffer, IN DWORD dwInLen, OUT BYTE *OutBuffer);


#endif